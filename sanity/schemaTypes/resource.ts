import { defineField, defineType } from "sanity";
import { FileTextIcon } from "lucide-react";

export const resource = defineType({
  name: "resource",
  title: "Resource",
  type: "document",
  icon: FileTextIcon,
  fields: [
    defineField({
      name: "title",
      title: "Resource Title",
      type: "string",
      validation: (Rule) => Rule.required().max(100),
      description: "Name of the resource",
    }),
    defineField({
      name: "slug",
      title: "Slug",
      type: "slug",
      options: {
        source: "title",
        maxLength: 96,
      },
      validation: (Rule) => Rule.required(),
      description: "URL-friendly version of the title",
    }),
    defineField({
      name: "description",
      title: "Description",
      type: "text",
      rows: 4,
      validation: (Rule) => Rule.required().max(500),
      description: "Brief description of the resource and its value",
    }),
    defineField({
      name: "content",
      title: "Detailed Content",
      type: "array",
      of: [{ type: "block" }],
      description: "Detailed information about the resource",
    }),
    defineField({
      name: "resourceType",
      title: "Resource Type",
      type: "string",
      options: {
        list: [
          { title: "Document (PDF)", value: "pdf" },
          { title: "Spreadsheet", value: "spreadsheet" },
          { title: "Presentation", value: "presentation" },
          { title: "Video", value: "video" },
          { title: "Audio/Podcast", value: "audio" },
          { title: "Image/Infographic", value: "image" },
          { title: "Template", value: "template" },
          { title: "Tool/Software", value: "tool" },
          { title: "Website/Link", value: "link" },
          { title: "Course/Tutorial", value: "course" },
          { title: "Book/eBook", value: "book" },
          { title: "Article/Blog Post", value: "article" },
          { title: "Research/Report", value: "research" },
          { title: "Other", value: "other" },
        ],
      },
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: "category",
      title: "Primary Category",
      type: "reference",
      to: [{ type: "resourceCategory" }],
      validation: (Rule) => Rule.required(),
      description: "Main category this resource belongs to",
    }),
    defineField({
      name: "additionalCategories",
      title: "Additional Categories",
      type: "array",
      of: [{ type: "reference", to: [{ type: "resourceCategory" }] }],
      description: "Other categories this resource relates to",
    }),
    defineField({
      name: "tags",
      title: "Tags",
      type: "array",
      of: [{ type: "string" }],
      description: "Keywords and topics for better discoverability",
    }),
    defineField({
      name: "file",
      title: "File Upload",
      type: "file",
      description: "Upload a file (PDF, document, etc.)",
    }),
    defineField({
      name: "externalUrl",
      title: "External URL",
      type: "url",
      description: "Link to external resource (website, video, etc.)",
      validation: (Rule) =>
        Rule.uri({
          scheme: ["http", "https"],
        }),
    }),
    defineField({
      name: "thumbnailImage",
      title: "Thumbnail Image",
      type: "image",
      options: {
        hotspot: true,
      },
      description: "Preview image for the resource",
    }),
    defineField({
      name: "author",
      title: "Author/Creator",
      type: "reference",
      to: [{ type: "userProfile" }],
      validation: (Rule) => Rule.required(),
      description: "Who created or contributed this resource",
    }),
    defineField({
      name: "contributors",
      title: "Contributors",
      type: "array",
      of: [{ type: "reference", to: [{ type: "userProfile" }] }],
      description: "Additional people who contributed to this resource",
    }),
    defineField({
      name: "difficulty",
      title: "Difficulty Level",
      type: "string",
      options: {
        list: [
          { title: "Beginner", value: "beginner" },
          { title: "Intermediate", value: "intermediate" },
          { title: "Advanced", value: "advanced" },
          { title: "Expert", value: "expert" },
        ],
      },
      initialValue: "beginner",
      description: "Skill level required to use this resource",
    }),
    defineField({
      name: "estimatedTime",
      title: "Estimated Time",
      type: "string",
      description: "How long it takes to consume this resource (e.g., '30 minutes', '2 hours')",
    }),
    defineField({
      name: "price",
      title: "Price Information",
      type: "object",
      fields: [
        defineField({
          name: "isFree",
          title: "Free Resource",
          type: "boolean",
          initialValue: true,
        }),
        defineField({
          name: "amount",
          title: "Price Amount",
          type: "number",
          validation: (Rule) => Rule.min(0),
        }),
        defineField({
          name: "currency",
          title: "Currency",
          type: "string",
          initialValue: "USD",
          options: {
            list: ["USD", "EUR", "GBP", "CAD", "AUD"],
          },
        }),
        defineField({
          name: "priceNote",
          title: "Price Note",
          type: "string",
          description: "Additional pricing information",
        }),
      ],
    }),
    defineField({
      name: "requirements",
      title: "Requirements",
      type: "array",
      of: [{ type: "string" }],
      description: "What users need to access or use this resource",
    }),
    defineField({
      name: "featured",
      title: "Featured Resource",
      type: "boolean",
      initialValue: false,
      description: "Highlight this resource on the homepage",
    }),
    defineField({
      name: "status",
      title: "Status",
      type: "string",
      options: {
        list: [
          { title: "Draft", value: "draft" },
          { title: "Published", value: "published" },
          { title: "Archived", value: "archived" },
          { title: "Under Review", value: "review" },
        ],
      },
      initialValue: "draft",
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: "accessLevel",
      title: "Access Level",
      type: "string",
      options: {
        list: [
          { title: "Public", value: "public" },
          { title: "Community Members Only", value: "community" },
          { title: "Premium Members Only", value: "premium" },
          { title: "Restricted", value: "restricted" },
        ],
      },
      initialValue: "public",
      validation: (Rule) => Rule.required(),
      description: "Who can access this resource",
    }),
    defineField({
      name: "downloadCount",
      title: "Download Count",
      type: "number",
      initialValue: 0,
      readOnly: true,
      description: "Number of times this resource has been downloaded",
    }),
    defineField({
      name: "viewCount",
      title: "View Count",
      type: "number",
      initialValue: 0,
      readOnly: true,
      description: "Number of times this resource has been viewed",
    }),
    defineField({
      name: "rating",
      title: "Average Rating",
      type: "object",
      fields: [
        defineField({
          name: "average",
          title: "Average Rating",
          type: "number",
          validation: (Rule) => Rule.min(0).max(5),
          readOnly: true,
        }),
        defineField({
          name: "count",
          title: "Rating Count",
          type: "number",
          initialValue: 0,
          readOnly: true,
        }),
      ],
      readOnly: true,
      description: "User ratings for this resource",
    }),
    defineField({
      name: "createdAt",
      title: "Created At",
      type: "datetime",
      initialValue: () => new Date().toISOString(),
      readOnly: true,
    }),
    defineField({
      name: "updatedAt",
      title: "Updated At",
      type: "datetime",
      description: "Last time this resource was modified",
    }),
    defineField({
      name: "publishedAt",
      title: "Published At",
      type: "datetime",
      description: "When this resource was published",
    }),
  ],
  preview: {
    select: {
      title: "title",
      subtitle: "resourceType",
      media: "thumbnailImage",
      status: "status",
      featured: "featured",
    },
    prepare(selection) {
      const { title, subtitle, status, featured } = selection;
      const typeLabels: Record<string, string> = {
        pdf: "📄 PDF",
        spreadsheet: "📊 Spreadsheet",
        presentation: "📽️ Presentation",
        video: "🎥 Video",
        audio: "🎧 Audio",
        image: "🖼️ Image",
        template: "📋 Template",
        tool: "🔧 Tool",
        link: "🔗 Link",
        course: "🎓 Course",
        book: "📚 Book",
        article: "📰 Article",
        research: "🔬 Research",
        other: "📁 Other",
      };
      
      return {
        title: `${featured ? "⭐ " : ""}${title || "Untitled Resource"}`,
        subtitle: `${typeLabels[subtitle] || subtitle || "Unknown type"} • ${status || "draft"}`,
        media: selection.media,
      };
    },
  },
  orderings: [
    {
      title: "Created Date, New",
      name: "createdDesc",
      by: [{ field: "createdAt", direction: "desc" }],
    },
    {
      title: "Title A-Z",
      name: "titleAsc",
      by: [{ field: "title", direction: "asc" }],
    },
    {
      title: "Most Downloaded",
      name: "downloadDesc",
      by: [{ field: "downloadCount", direction: "desc" }],
    },
    {
      title: "Highest Rated",
      name: "ratingDesc",
      by: [{ field: "rating.average", direction: "desc" }],
    },
  ],
});
